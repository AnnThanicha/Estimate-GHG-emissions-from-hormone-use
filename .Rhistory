}
# Average daily weight gain
bwg  <- which(cow[["par"]] < 3)
if(length(bwg) > 0){
cow[["weight"]][bwg] <- cow[["weight"]][bwg] + ADG
}
# Energy requirements
# maintenance and FPCM
EparCat <- cow[["par"]] ; EparCat <- EparCat[EparCat > 3] <- 3
cow[["energy"]] <- 42.4 * cow[["weight"]]^0.75 + 442 * (cow[["yield"]] * 0.337 + 0.116 * fat[EparCat]*100 + 0.06 * prot[EparCat]*100)
# growth
Eg <- which(cow[["par"]] < 3)
if(length(Eg) > 0){
cow[["energy"]][Eg] <- cow[["energy"]][Eg] + G.ENGY[cow[["par"]][Eg]]
}
# stage of pregnancy
Ep <- which(cow[["pregnant"]] == 1 & (cow[["daycalf"]] -  day) <= 4 * 30.5 & (cow[["daycalf"]] -  day) > 0)
if(length(Ep) > 0){
pregstage <- ceiling((cow[["daycalf"]][Ep] - day)/30.5)
if(any(pregstage == 0)){print("There is a ZERO in your pregstage") ; browser()}
cow[["energy"]][Ep] <- cow[["energy"]][Ep] + P.ENGY[pregstage]
}
# General culling ---------------------------------------------------------
# general culling rates will increase with age
# find healthy cows
hc<- which(cow[["status"]] == 1) # some cows that have a mobility score >= 2 might be culled for other reasons
parCAtcull <- cow[["par"]][hc] ; parCAtcull[parCAtcull > 5] <- 5
gencull <- hc[rbinom(length(hc), 1, p_gencull[parCAtcull]/ts) == 1]
# flag cows to be removed at lactaion end for general culling reasons
if(length(gencull) > 0){
cow[["status"]][gencull]<- 4
}
# probability of a general cull cow sucumbing to mortality
# find general cull cows
pmort<- which(cow[["status"]] == 4)
mort<-  pmort[rbinom(length(pmort), 1, p_mort/ts) == 1]
if(length(mort) > 0){
cow[["status"]][mort] <- 5
cow[["cull"]][mort] <- 5
cow[["rhenter"]][mort] <- rgeom(length(mort), p_rh) + 1 + day
z<- c("dim", "mdl", "yield", "yield.rdc", "rpl", "detoest", "pregnant", "status",
"oestrus", "daycalf", "dayendvwp", "daycullfert") # variables to reset in cow list (add variables as you bring them to life in the model)
cow[z]<- lapply(cow[z], function(x) {x[mort] <- 0; x})
}
gencull <- which(cow[["status"]] == 4)
if(length(gencull) > 0){
cow[["cull"]][gencull]<- 4
cow[["yield"]][gencull] <- 0
cow[["yield.rdc"]][gencull] <- 0
}
# find cows that are not pregnant after n days after first oestrus and/or failed to conceive after max inseminations
fertcull <- which(cow[["pregnant"]] == 0 & cow[["daycullfert"]] == day) # This index is used when a max daysOpen culling rule is applied
#CEVA
#if(CEVA_scen %in% 1:3){
# fertcull <- which(cow[["pregnant"]] == 0 & cow[["n_insem"]] == max_insem)}
# flag cow which will be culled at end of lactation for fertility reasons
if(length(fertcull) > 0){
cow[["status"]][fertcull] <- 2
z<- c("oestrus", "daycalf", "dayendvwp") # variables to reset in lookup list
cow[z] <-lapply(cow[z], function(x) {x[fertcull] <- 0; x})
}
# remove cow at end of lactation due to fertility culling reasons and give culling reason
fc<- which(cow[["status"]] == 2 & cow[["yield"]] - cow[["yield.rdc"]] < yield_thresh)
# fc2 <- which(cow[["status"]] == 6 & cow[["pregnant"]] == 0 & cow[["yield"]] < yield_thresh & cow[["calf"]] == 0) # remove cows that became lame after tagged as fert cull
# fc <- c(fc, fc2)
if(length(fc) > 0){
cow[["cull"]][fc]<- 2
}
# find max par cows
mpc<- which(cow[["par"]] == max_par & cow[["yield"]] < yield_thresh)
if(length(mpc) > 0){
cow[["status"]][mpc] <- 3
cow[["cull"]][mpc]   <- 3 # tag as cull for max_par reasons (=3)
# cow[c("status", "par", "mdl", "dim", 'yield')]<- lapply(cow[c("status", "par", "mdl", "dim", 'yield')], function(x) {x[mpc] <- 0; x})
}
# adjust number of milking days left for cull cows if still producing above the threshold
adjmd <- which(cow[["dim"]] == cow[["mdl"]] & cow[["pregnant"]] == 0 & cow[["yield"]] >= yield_thresh)
if(length(adjmd) > 0){
cow[["mdl"]][adjmd] <- cow[["mdl"]][adjmd] + 1
}
# Production impacts ------------------------------------------------------
#~ I have left the variables here as used to calculate the economic variables below in `Economic calculations`
# live weight gain adjusted in "CALVING AND MILKING"
# reduced milk yield
mlossidx <- which(cow[["pregnant"]] == 1 & ceiling((i-cow[["oestrus"]])/7) > 5 & cow[["yield"]] > 0)    #milk yield loss after 5 wk pregnancy --- Inchaisri et al 2010
if(length(mlossidx) > 0) {
cow[["yield.rdc"]][mlossidx] <- mloss_1 * exp(mloss_2 * ceiling((i-cow[["oestrus"]][mlossidx])/7))
}
# actual energy
cow[["act.energy"]] <- cow[["energy"]] - (42.4 * cow[["weight"]]^0.75 + 442 * (cow[["yield"]] * 0.337 + 0.116 * fat[EparCat]*100 + 0.06 * prot[EparCat]*100)) +
(42.4 * cow[["weight"]]^0.75 + 442 * ((cow[["yield"]]-cow[["yield.rdc"]]) * 0.337 + 0.116 * fat[EparCat]*100 + 0.06 * prot[EparCat]*100))
# Data collection ---------------------------------------------------------
# collect data for each day
cowsList[[i]] <- cow
} # :: end of For loop ::
# return list of daily data
cowsList
} # :: end of model ::
# Model replication functions ---------------------------------------------
limS <- 5     # simulation limits for RAM output
clb <- TRUE   # calibration
MySim2<- function(nFrames = xPRM$n_sim, limS = NA, clb = NA, baseline_folder) {
if(xPRM$n_sim > limS){
setwd(xPRM$storeWD)
setwd("Outputs")
if(!clb){
setwd("Final")
t <- format(Sys.time(), "%F %H-%M") ; t <- gsub(" ", "_", t)
t <- paste0(t, "_", "Scenario",
ifelse(xPRM$CEVA_scen == 0, paste0(xPRM$CEVA_scen, xPRM$baseline_int),
xPRM$CEVA_scen))
dir.create(file.path(getwd(), t))
setwd(dir()[dir() == t])
RAW.dir <- getwd()
} else{
setwd("Calibration")
t <- format(Sys.time(), "%F %H-%M") ; t <- gsub(" ", "_", t)
t <- paste0(t, "_", "Scenario",
ifelse(xPRM$CEVA_scen == 0, paste0(xPRM$CEVA_scen, xPRM$baseline_int),
xPRM$CEVA_scen))
dir.create(file.path(getwd(), t))
setwd(dir()[dir() == t])
}
} else{
dl <- vector(mode = "list", length = as.numeric(nFrames))
}
# browser()
#  Read in initialisation data
initFiles <- list.files(paste0("C:/Users/6350089/OneDrive - Universiteit Utrecht/Side project/Ceva_model environment/GIT_CEVA/Outputs/Initialisation/",
baseline_folder),
full.names = T)[1:xPRM$n_sim]
initData <- lapply(initFiles, fread)
set.seed(xPRM$seed)
# fwrite(as.data.frame(.Random.seed), "seed.csv")
t. <- format(Sys.time(), "%F %H-%M") ; t. <- gsub(" ", "_", t.)
save(xPRM, file = paste0("default_Parameters_", t., ".RData"))
for(i in seq.int(1,nFrames,1)) {
initData_I <- initData[[i]]
if(xPRM$n_sim > limS){
frame <- rbindlist(mkFrames(X = xPRM, initData_i = initData_I))
frame$.id <- i
fwrite(frame, paste0("MySimCows_", str_pad(i, 5, pad = "0"), ".csv"))
# rm(frame)
}
else{
print(i)
dl[[i]]<- rbindlist(mkFrames())
}
}
if(xPRM$n_sim <= limS){
rbindlist(dl, idcol = TRUE)
}
}
if(xPRM$CEVA_scen == 0){
ptm <- proc.time()
MySim2(nFrames = xPRM$n_sim, limS = 0, clb = T)
proc.time() - ptm #~ model run time
}else{
ptm <- proc.time()
MySim2(nFrames = xPRM$n_sim, limS = 0, clb = T, baseline_folder = "2024-08-20_10-17_Scenario0TRUE")  #from the init data (baseline)change later
proc.time() - ptm #~ model run time
}
gc()
# Required library -----------
library (ggplot2)
library(readxl)
library(dplyr)
library(readr)
library(tidyr)
library(data.table)
library(profvis)
library(directlabels)
library(esquisse)
library(Hmisc)
library(varhandle)
library(beepr)
library(ggridges)
library(viridis)
library(hrbrthemes)
library(mc2d)
library(devtools)
library(cowplot)
library(RColorBrewer)
# import feed data ------------
feed <- read_excel("feed.composition.xlsx")
# import feed data ------------
feed <- read_excel("feed.composition.xlsx")
fatP <- 4.42 # %fat from CBS, 2022 https://www.cbs.nl/nl-nl/cijfers/detail/7425eng
protP <- 3.55 # %protein
grazing.start <- 91 # day of the year that the summer starts (grazing starts)
grazing.end <-  274 # day of the year that the summer ends (grazing ends)
grazing.hour <- 8 # default is 8 hour of grazing per day
kg_FPCM20 <-  (0.337 + 0.116 * fatP + 0.06 * protP) * 20
kg_FPCM40  <- (0.337 + 0.116 * fatP + 0.06 * protP) * 40
n_cows <- 200
# feed related parameters
VEM.silage <- feed$Silage[feed$Value=="VEM"]
pro.silage <- feed$Silage[feed$Value=="pro.feed"]
LU.silage <- feed$Silage[feed$Value=="LU.feed"]
enteric.silage <- feed$Silage[feed$Value=="enteric.feed"]
N.silage <- feed$Silage[feed$Value=="N.feed"]
Ni.silage <- feed$Silage[feed$Value=="Ni.feed"]
Ph.silage <- feed$Silage[feed$Value=="Ph.feed"]
VEM.grass <-  feed$Pasture.grass[feed$Value=="VEM"]
pro.grass <- feed$Pasture.grass[feed$Value=="pro.feed"]
LU.grass <- feed$Pasture.grass[feed$Value=="LU.feed"]
enteric.grass <- feed$Pasture.grass[feed$Value=="enteric.feed"]
N.grass <- feed$Pasture.grass[feed$Value=="N.feed"]
Ni.grass <- feed$Pasture.grass[feed$Value=="Ni.feed"]
Ph.grass <- feed$Pasture.grass[feed$Value=="Ph.feed"]
VEM.grazecon <- feed$Grazing.concentrate[feed$Value=="VEM"]
pro.grazecon <- feed$Grazing.concentrate[feed$Value=="pro.feed"]
LU.grazecon <- feed$Grazing.concentrate[feed$Value=="LU.feed"]
enteric.grazecon <- feed$Grazing.concentrate[feed$Value=="enteric.feed"]
N.grazecon <- feed$Grazing.concentrate[feed$Value=="N.feed"]
Ni.grazecon<- feed$Grazing.concentrate[feed$Value=="Ni.feed"]
Ph.grazecon<- feed$Grazing.concentrate[feed$Value=="Ph.feed"]
VEM.stablecon <- feed$Stable.concentrate[feed$Value=="VEM"]
pro.stablecon <- feed$Stable.concentrate[feed$Value=="pro.feed"]
LU.stablecon <- feed$Stable.concentrate[feed$Value=="LU.feed"]
enteric.stablecon <- feed$Stable.concentrate[feed$Value=="enteric.feed"]
N.stablecon <- feed$Stable.concentrate[feed$Value=="N.feed"]
Ni.stablecon<- feed$Stable.concentrate[feed$Value=="Ni.feed"]
Ph.stablecon<- feed$Stable.concentrate[feed$Value=="Ph.feed"]
setwd("C:/Users/6350089/OneDrive - Universiteit Utrecht/Side project/Ceva_model environment/GIT_CEVA/Outputs/Calibration/2024-08-20_10-17_Scenario0TRUE")
files = list.files(pattern="*.csv")
# only 1:500 files
files <-  files[1:500]
# for GHG
output <- list()
# for protein at year 20
output_protein <- list()
# For store reproduction outcomes
output_repro <- list()
# For store culling dataframe
output_culling <- list()
for (i in 1:length(files)) {
MySimCows <- data.table::fread(files[i],showProgress = FALSE)
# calculate actual yield
MySimCows$act.yield <-  MySimCows$yield - MySimCows$yield.rdc
# Calculate gestation day and month
MySimCows$gest.day <- ifelse( MySimCows$pregnant ==1 ,MySimCows$i - MySimCows$oestrus, 0)
MySimCows$gest.month <- round(MySimCows$gest.day/31,0)
#~~~~~~~~~~-----------------------------------------------------
# For summarise reproductive outcomes -------
# for milk yield
milk_yield <- MySimCows %>%  group_by (year) %>% summarise (milk_yield = sum(yield) - sum(yield.rdc))
# for total number of culling
total_cull <- MySimCows %>%  group_by (year) %>% filter(cull != 0) %>%   summarise(nCulls = n())
# for total number of fertility culling
fert_cull <- MySimCows %>%  group_by (year) %>% filter(cull == 2) %>%   summarise(fertCulls = n())
# for total number of general culling
gen_cull <- MySimCows %>%  group_by (year) %>% filter(cull == 4) %>%   summarise(genCulls = n())
# for total number of max parity culling
maxpar_cull <- MySimCows %>%  group_by (year) %>% filter(cull == 3) %>%   summarise(maxparCulls = n())
# for total number of calves
total_calves <- MySimCows %>%  group_by (year) %>% filter(calf != 0 & par != 1 ) %>%   summarise(nCalf = n())
# calving interval median and 90%quantile
calving_interval <-  MySimCows %>%  filter(calf == 1, prevdaycalf != 0) %>% mutate(CI = daycalf - prevdaycalf) %>% group_by(year) %>% summarise(mean_CI = mean(CI), lower_CI= quantile(CI, probs = .05),upper_CI= quantile(CI, probs = .95) )
# calving to conception median and 90%quantile
calving_conception <- MySimCows %>% filter(detoest == 1, n_insem == 1) %>%  mutate(CC = dim) %>% group_by(year) %>% summarise(mean_CC = mean(CC), lower_CC= quantile(CC, probs = .05),upper_CC= quantile(CC, probs = .95) )
repro <- milk_yield %>%  left_join(total_cull, by='year') %>%
left_join(fert_cull, by='year') %>%
left_join(gen_cull, by='year') %>%
left_join(maxpar_cull, by='year') %>%
left_join(total_calves, by='year') %>%
left_join(calving_interval , by='year') %>%
left_join(calving_conception , by='year') %>% mutate(iter= i)
output_repro[[i]] <-  repro
## To get age, weight at culling and reason for culling
output_culling[[i]] <- MySimCows %>%  filter(cull != 0)
rm(repro, milk_yield,total_cull,total_calves,calving_interval,calving_conception)
#~~~~~~~~~~-----------------------------------------------------
# For calculation of GHG of individual cow ---------
Output.GHG.cowday <- mutate (MySimCows,
# Calculate FPCM per cow per day
kg_fat = (act.yield * fatP/ 100), # calculate fat content in milk
kg_prot = (act.yield * protP/ 100), # calculate protein content in milk
kg_FPCM = (0.337 + 0.116 * fatP + 0.06 * protP) * act.yield, # calculate Fat-and-protein-corrected milk (FPCM) from milk yield
# Calculate VEM for overall milking  + maintain # (Handbook BEX, 2023 P.11)
# if the milk yield >40, the cow only get the VEM from concentrate feed up to 40 kg
VEM.maintain = ifelse(act.yield > 0  ,  42.4 * (weight^0.75) * (1 + (kg_FPCM - 15) * 0.00165),42.4 * (weight^0.75) * (1 + (0 - 15) * 0.00165) ),
VEM.milk = ifelse(act.yield > 0, 442 * kg_FPCM * (1 + (kg_FPCM -15) * 0.00165) ,0),
# VEM for
# Additional VEM for summer *only for lactating cows and heifer *Dry cow not grazing
# Assume that the grazing period 183 days (1st May (121) - 31 October (304)) in summer month 7 hour per day (CBS 2021)
# VEM for grazing = 419 (Table2 Handbook BEX, 2023)
# Only lactating cow grazing
VEM.grazing = ifelse(act.yield > 0 & day %in% c(grazing.start:grazing.end) , 419, 0),
# Additional VEM for growth
# Lactating heifers and 2nd parity cows still have to grow: parity 1 = 625, parity 2 = 325, parity 3 = 125, parity 4 = 125  (Table 1.1 CVB, 2022)
VEM.growth = case_when(par == 1 ~ 625, par == 2 ~ 325, par ==3 ~ 125, par ==3 ~ 125 ,.default = 0),
# Additional VEM for pregnant for dairy cows from the 4th month of gestation. (Table 1.3 CVB, 2022)
# 4 month  = 250, 5 month = 400, 6 month = 650, 7 month = 1100, 8 month = 1700, 9 month = 2750
VEM.pregnant = case_when(gest.month  == 4 ~ 250, gest.month  == 5 ~ 400,  gest.month  == 6 ~ 650,gest.month  == 7 ~ 1100, gest.month  == 8 ~ 1700, gest.month  == 9 ~ 2750,.default = 0),
# total VEM
VEM.total = VEM.maintain+ VEM.milk + VEM.grazing + VEM.growth+ VEM.pregnant,
# Calculate VEM for maintain + milk until 20 kg
VEM.maintain20 = VEM.maintain +  (442 * kg_FPCM20 * (1 + (kg_FPCM20 -15) * 0.00165)) ,
# Calculate VEM for maintain + milk until 40 kg
VEM.maintain40 = (442 * kg_FPCM40 * (1 + (kg_FPCM40 -15) * 0.00165))+ VEM.maintain  + VEM.grazing + VEM.growth+ VEM.pregnant,
# VEM from concentrate and roughage # roughage will support maintain and milk yield up to 20 kg
# milk more 20 kg + pregnant growth graze are from concentrate
VEM.roughage = ifelse (VEM.maintain20 > VEM.total, VEM.total, VEM.maintain20 ),
VEM.concentrate = ifelse (VEM.maintain20 > VEM.total, 0, VEM.total - VEM.maintain20 ),
# to limit the max VEM to 40 kg milk
VEM.concentrate = ifelse (VEM.total> VEM.maintain40, VEM.maintain40-VEM.maintain20, VEM.concentrate),
# For roughage, we assume that the cow graze for 8 hours, which approximately (2+0.75*6) = 6.5 kg DM of fresh grass (Table 2, Handbook BEX 2023)
# only lactating cow can graze, the dry cow will not graze
grass.intake =  ifelse (act.yield > 0 & day %in% c(grazing.start:grazing.end),6.5, 0), # kg DM
# we deduct that from roughage VEM and the rest is come from 50:50 grass
silage.intake = ifelse (act.yield > 0 & day %in% c(grazing.start:grazing.end), (VEM.roughage - (6.5*VEM.grass)) /VEM.silage,
VEM.roughage / VEM.silage),# kg DM
# for concentrate feed we assume for non-grazing =  concentrate:high protein concentrate: wet concentrate = 0.5:0.35:0.15 for non grazing (CBS, 2023)
# for grazing = concentrate: wet concentrate = 0.85: 0.15
# the DM, VEM of concentrate were calculate separately in excel file feed.composition
grazecon.intake = ifelse (act.yield > 0 & day %in% c(grazing.start:grazing.end), VEM.concentrate /VEM.grazecon,0), # kg DM
stablecon.intake = ifelse (grazecon.intake == 0,  VEM.concentrate/VEM.stablecon, 0),# kg DM
total.DMI = grazecon.intake + stablecon.intake + grass.intake + silage.intake,
# Manure excretion calculation -----------
# calculate manure excretion from Nennich et al, 2005 from DMI
# we separate manure excretion from stable and pasture, we assume that the cow graze for 8 hour (1/3 day), and dry cow did
ME.pasture = ifelse (act.yield > 0 & day %in% c(grazing.start:grazing.end), ((total.DMI * 2.63)  + 9.4)*1/3, 0),
ME.stable = ifelse (act.yield > 0 & day %in% c(grazing.start:grazing.end), ((total.DMI * 2.63)  + 9.4)*2/3, ((total.DMI * 2.63)  + 9.4)),
#  Nitrogen calculation ----------
# To calculate GHG from manure management, firstly we need to calculate the kg nitrogen in manure, kg TAN
# Calculate kg nitrogen in manure
# N in feed is calculated from from %crude protein in feed/ 6.25 (IPCC 2006, p. 58)
# Nitrogen in feed (kg N / kg DM) is calculated from excel sheet
N.feed = (grass.intake * N.grass)  + (silage.intake * N.silage ) + (grazecon.intake * N.grazecon) + (stablecon.intake * N.stablecon)  ,  # kg N per cow per day,
# Calculate TAN, N excretion = N intake (absorbed protein) - N retention in milk, growth and pregnant (Velthof 2010)
# N intake calculated from DM * %CP * digestibility/ 6.25 * we will calculate this in excel file
N.intake = (grass.intake * Ni.grass) +(silage.intake * Ni.silage ) +  (grazecon.intake * Ni.grazecon) + (stablecon.intake * Ni.stablecon) , # Kg N  per cow per day,
# Nitrogen retention in milk (kg N per cow per day)  (check Hand book for nitrogen)
N.fix.milk =  act.yield  * (protP/100) /6.38,  # 6.38 is conversion factor from milk protein to milk N (IPCC 2006, equation 10.33),
# Nitrogen retention for growth
# N content from heifer = 23.1 g /kg (assuming 540 kg) , N content in fully mature dairy cow = 22.5 g/kg (assuming 650 kg)
# On average the N fixation for growth from heifer to parity 3  = ((650*22.5) - (23.1*540)) /1000 = 2.151 kg from heifer to cow parity 3, 3 year. Average N per day = 2.151/(365*3) = 0.00196 N kg /day-1
# Another calculation using IPCC, 2006 Equation 10.33 (0.134 * (268-(7.03*4.3125/0.134))) /(1000*6.25) = 0.00089522 N kg per cow per day
N.fix.growth = ifelse (par <= 3, 0.00196, 0),
# Nitrogen retention for pregnant
# from Bex 2023 Table 6 N content in calf = 29.4 g/kg assume that 1 calf weight  = 44 kg, 29.4*44/1000 = 1.2936 N kg per calf
# the gestation period = 283 day = 1.2936 / 283 N kg per day
N.fix.gest = ifelse (pregnant ==1, 29.4*44/1000/283, 0),
#  N in manure = N in feed  - N retention
N.manure = N.feed - N.fix.milk - N.fix.growth - N.fix.gest,
# N in urine = TAN = N.intake (absorbed protein) - N retention
N.TAN = N.intake - N.fix.milk - N.fix.growth - N.fix.gest,
#' GHG from manure management will be calculate in period of 1 year and separately between manure in pasture and stable
#' To do that we need to calculate the N.manure in stable, N.manure.pasture and N.TAN in stable  (we don't need N.TAN pasture for calculation)
#' We assume the amount of manure is proportional to grazing hour and grazing period
#' Only lactating cow grazing in summer, dry cow will not graze during summer
# N.manure in stable
N.TAN.pasture = ifelse(act.yield > 0 & day %in% c(grazing.start:grazing.end), N.TAN * grazing.hour/24,  0),
# N manure in pasture
N.manure.pasture = ifelse(act.yield > 0 & day %in% c(grazing.start:grazing.end), N.manure * grazing.hour/24,  0),
# N.TAN stable
N.TAN.stable = ifelse(act.yield > 0 & day %in% c(grazing.start:grazing.end),  N.TAN * (1- (grazing.hour/24)), N.TAN),
# Phosphate calculation---------
Ph.feed = (grass.intake * Ph.grass)  + (silage.intake * Ph.silage ) + (grazecon.intake * Ph.grazecon) + (stablecon.intake * Ph.stablecon)  ,  # kg P per cow per day,
Ph.fix.milk = 0.97/1000 * act.yield, # 0.97 g / kg milk (Bex, 2023 Table 6)
#P content from heifer = 7.4 g /kg (assuming 540 kg) , P content in fully mature dairy cow = 7.4 g/kg (assuming 650 kg)
# On average the P fixation for growth from heifer to parity 3  = ((650*7.4) - (7.4*540)) /1000 = 0.814 kg
# from heifer to cow parity 3, 3 year. Average P per day = 0.8141/(365*3) = 0.00074 P kg /day-1
Ph.fix.growth = ifelse (par <= 3, 0.00074, 0),
# P for gestation: Calf phosphorus(P) content (g/kg) = 8.0 if calf wight 44 kg = 352 g
# divided by 283 gestation period = 357/283 = 1.24 g per day = 0.00124 kg per day
Ph.fix.gest =  ifelse (pregnant ==1, 0.00124, 0),
Ph.manure = Ph.feed - Ph.fix.milk - Ph.fix.growth  - Ph.fix.gest,
# (1) GHG Feed production --------
# 1.1 gCO2 emission for production of ingredients
# This value will be from excel file. We take this value from feed print.
GHG.feed = ((grass.intake * pro.grass) + (silage.intake * pro.silage )  + (grazecon.intake * pro.grazecon) + (stablecon.intake * pro.stablecon)), # GHG from feed production (kg CO2e)
# 1.2 gCO2 emission for LULuc
# This value will be from excel file. We take this value from feed print.
GHG.LU = ((grass.intake * LU.grass) + (silage.intake * LU.silage )  +  (grazecon.intake * LU.grazecon) + (stablecon.intake * LU.stablecon)),# GHG from Land use land use change (kg CO2e)
# (2) GHG Enteric methane  ----------
# # This value will be from excel file. We take this value from feed print.
# GHG enteric fermentation (kg CH4)
# *27 is to convert methane to CO2 equivalent, and 273 to N2O (IPCC AR6, 2022 Table 7.15)
GHG.enteric = ((grass.intake * enteric.grass) + (silage.intake * enteric.silage )  +  (grazecon.intake * enteric.grazecon) + (stablecon.intake * enteric.stablecon)) * 27,
# (3) GHG System substitution --------
# GHG reduced from meat substitution from calves and culled cows
#'Emissions of GHGs related to the production of meat from chicken (5.6 kg CO2e/kg edible product), pork (7.3 kg CO2e/kg edible product)
#'or beef (23.4 kg CO2e/kg edible product) (Van Middelaar et al., 2014a) were weighted to
#'an average emission factor (10 kg CO2e/kg edible product) based on the average consumption of chicken (28 kg), pork (22 kg),
#'and beef (14 kg) per capita in OECD countries (OECD, 2015). For culled cows (540e650 kg live weight) and calves (44 kg live weight),
#'it was assumed that 1 kg of animal live weight consisted of 0.406 kg edible product (Van Middelaar et al., 2014a).
#'* 10 kg CO2e/ kg edible product ) can change if we new data on CO2 emission per edible animal product and average consumption per capita
#'# Check new calculation in onenote
GHG.substitute.calves = ifelse(calf == "1", 44* 0.406 * -10.4, 0 ), # assume 44 kg calf, we assume all calves were sell form meat
GHG.substitute.cull = ifelse(cull != "0" , 5601 - (weight * 0.406 * 10.4) , 0 ),
#(4) GHG Manure management  ----------
# Calculate the emission from stable manure
# direct N2O-N  from stable  (De vries 2011, Table 3.2)
# 44/28 to convert from N2O-N to N2O (IPCC 2006, equation 10.25)
# 1 N2O = 273 CO2 (IPCC AR6, 2022 Table 7.15, page 1034)
GHG.dN2O.stable = N.TAN.stable * 0.0015 * (44/28) * 273,
# indirect N2O-N from stable
# Indirect N2O come from NH3-N, NOx-N, which calculated from TAN
# check De vries 2011, Table 3.2 how to calculate NH3-N, NOx-N from TAN and check IPCC 2006 Equation 10.27 for indirect N2O emission factor
GHG.iN2O.stable = ( N.TAN.stable * 0.1 * 0.01 * (44/28)) + ( N.TAN.stable * 0.0015 * 0.01 * (44/28))* 273,
# direct N2O-N  from pasture (Vonk et al. 2010 page 70)
GHG.dN2O.pasture =  N.manure.pasture * 0.033 * (44/28) * 273,
# Indirect N2O-N from pasture
# Indirect N2O come from NH3-N which calculated from TAN and  NOx-N, NO3-N which calculated from N
# NH3-N calculation check Vonk et al. 2010 P. 62 --> 1.98 * 10^-5 * (N-content ration)^3.664; N-content ration is g N/kg DM feed
# NOx-N calculation check Vonk et al2010 P.65
# NO3-N calculation check Velthof, 2011 Fracleach P.10
# Emission factor from NH3-N, NOx-N to N2O-N = 0.01 (IPCC 2006 Equation 10.27)
# Emission factor from NO3N = 0.0075 (IPCC, 2006  Equation 10.29)
GHG.iN2O.pasture = ((( N.TAN.pasture * 0.053)*0.01) + ( N.manure.pasture * 0.012 *0.01) +
(N.manure.pasture * 0.12 * 0.0075)) * (44/28) *273,
# Emission from CH4
# Manure amount (ton) * OM * B0 * MCF * 0.67 * 27   (Vellinga, 2013 ) (0.67 is convert m3 to kg check IPCC, 2006) (27 to convert CH4 to CO2)
# OM, MCF and B0 are from the (Van der Maas , 2011 Table A8.4, A8.6)
# for stable OM = 64 per 1000 kg manure, B0F = 0.25,MCF = 0.17
# for pasture OM = 64 per 1000 kg manure, B0 = 0.25, MCF = 0.01
# Manure production  check https://longreads.cbs.nl/dierlijke-mest-en-mineralen-2021/graasdieren/
# 26000 manure kg/cow/year in stable and 3000 kg/cow/ year in pasture in total 29000 kg manure per cow per year
# we assume that 2/3 of herd graze, 1/3 is dry cow not grazing
# We changed calculation method to using manure excretion calculated from DMI
# CH4 Emission from  stable
GHG.CH4.stable = (ME.stable/1000) * 64 * 0.25 * 0.17 * 0.67 * 27 ,
# CH4 emission from pasture
GHG.CH4.pasture =  (ME.pasture/1000) * 64 * 0.25 * 0.01 * 0.67 * 27,
# sum GHG from manure
GHG.manure =  GHG.dN2O.stable+ GHG.iN2O.stable + GHG.dN2O.pasture + GHG.iN2O.pasture + GHG.CH4.stable +GHG.CH4.pasture,
# (5) Calculate protein -----
# Note that protein here is in unit of kg protein
# protein from milk
prot.milk = act.yield * 3.55/100,
# protein from meat from culled cows
# Average %protein from raw beef = 21%, 0.406 kg edible product per kg BW (Van Middelaar et al., 2014a)
prot.cull = ifelse(cull != "0" ,weight * 0.406 * 0.21 , 0 ),
# protein from calf, assume 44 kg BW of calves and  0.406 kg edible product per kg BW (Van Middelaar et al., 2014a)
prot.calf = ifelse(calf == "1", 44 * 0.406 * 0.21 , 0 ))
#~~~~~~~~~~-----------------------------------------------------
# Sum by cow ID for protein in year 18---------
#  Taking only culled cow in year 18 to calculate protein ------
# select cow UID that get cull on year 18
ID_cully18 <- MySimCows$UID[MySimCows$year == 18 & MySimCows$cull != 0 ]
Output.GHG.cowday_year18 <- Output.GHG.cowday[Output.GHG.cowday$UID %in% ID_cully18,]
# check if all cows start at parity 1 & DIM 1, nrow should be equal to ID_cully20
# nrow(MySimCows[MySimCows$par ==1 & MySimCows$dim ==1,]) == length(ID_cully20)
Output.GHG.protein <- Output.GHG.cowday_year18 %>% group_by(UID) %>%
summarise ( sum.kgFPCM = sum (kg_FPCM),
sum.milk = sum(act.yield),
sum.GHG.feed = sum(GHG.feed),
sum.GHG.LU = sum(GHG.LU),
sum.GHG.feedLU = sum.GHG.feed  + sum.GHG.LU,
sum.GHG.enteric = sum (GHG.enteric), # 1 CH4 = 27 CO2e
sum.GHG.substitute.calves = sum(GHG.substitute.calves),
sum.GHG.substitute.cull = sum (GHG.substitute.cull),
sum.GHG.manure = sum(GHG.manure),
sum.N.manure = sum(N.manure),
sum.Ph.manure = sum(Ph.manure),
sum.prot.milk = sum (prot.milk),
sum.prot.cull = sum(prot.cull),
sum.prot.calf = sum(prot.calf),
sum.GHG =  sum.GHG.feed + sum.GHG.LU + sum.GHG.enteric +sum.GHG.manure,
sum.GHG.system =  sum.GHG.feed + sum.GHG.LU + sum.GHG.enteric + sum.GHG.manure + sum.GHG.substitute.cull + sum.GHG.substitute.calves,
sum.prot =sum.prot.milk + sum.prot.cull +sum.prot.calf,
GHH.protein = sum.GHG/sum.prot
)%>%
as.data.frame()
# For protein
output_protein[[i]] <-  Output.GHG.protein
rm(Output.GHG.cowday_year18,Output.GHG.protein)
#~~~~~~~~~~-----------------------------------------------------
# Sum by cow year for GHG ---------
Output.GHG.farmyear <- Output.GHG.cowday %>% group_by(year) %>%
summarise ( sum.kgFPCM = sum (kg_FPCM),
sum.milk = sum(act.yield),
# for GHG manure calculation
sum.N.TAN.pasture = sum(N.TAN.pasture),
sum.N.manure.pasture = sum(N.manure.pasture),
sum.N.TAN.stable = sum(N.TAN.stable),
sum.ME.pasture =sum(ME.pasture),
sum.ME.stable = sum(ME.stable),
# for GHG feed and enteric calculation
grazecon.intake =  sum (grazecon.intake),
stablecon.intake = sum (stablecon.intake),
grass.intake = sum (grass.intake ),
silage.intake = sum(silage.intake),
# GHG calculation
sum.GHG.feed = sum(GHG.feed),
sum.GHG.LU = sum(GHG.LU),
sum.GHG.feedLU = sum.GHG.feed  + sum.GHG.LU,
sum.GHG.enteric = sum (GHG.enteric), # 1 CH4 = 27 CO2e
sum.GHG.substitute.calves = sum(GHG.substitute.calves),
sum.GHG.substitute.cull = sum (GHG.substitute.cull),
sum.GHG.manure = sum(GHG.manure),
sum.N.manure = sum(N.manure),
sum.Ph.manure = sum(Ph.manure),
sum.prot.milk = sum (prot.milk),
sum.prot.cull = sum(prot.cull),
sum.prot.calf = sum(prot.calf),
sum.GHG =  sum.GHG.feed + sum.GHG.LU + sum.GHG.enteric + sum.GHG.manure,
sum.GHG.system =  sum.GHG.feed + sum.GHG.LU + sum.GHG.enteric + sum.GHG.manure + sum.GHG.substitute.cull  + sum.GHG.substitute.calves  ,
sum.prot =sum.prot.milk + sum.prot.cull +sum.prot.calf,
GHH.protein = sum.GHG/sum.prot
)%>%
as.data.frame()
#For total GHG
output[[i]] <-  Output.GHG.farmyear
#~~~~~~~~~~-----------------------------------------------------
# Remove an for-loop -----
rm(Output.GHG.cowday, MySimCows, Output.GHG.farmyear)
# the counter for iterations
cat(paste(i, " ")); flush.console()
}
